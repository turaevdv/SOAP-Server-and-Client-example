<!-- Этот WSDL-файл описывает API сервера, к которому мы будем обращаться через сгенерированные классы в папке ws.generated -->
<!-- В данном случае нет необходимости в том, чтобы он находился здесь - мы забираем его по url, указанном в Maven plugin -->
<!-- Здесь WSDL-файл представлен для того, чтобы на его примере описать его основные части -->

<!-- (1) Корневой элемент всегда - definition -->
<wsdl:definitions xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                  xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
                  xmlns:tns="http://services.ws.sample/"
                  xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
                  xmlns:ns1="http://schemas.xmlsoap.org/soap/http"
                  name="PeopleService" targetNamespace="http://services.ws.sample/">

    <!-- (6) В данном блоке описываются сообщения и необходимые типы данных для общения между сервисами -->
    <wsdl:types>
        <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
                   xmlns:tns="http://services.ws.sample/"
                   elementFormDefault="unqualified"
                   targetNamespace="http://services.ws.sample/" version="1.0">

            <!-- Описывается тип данных getFatherById, который содержит в себе поле int -->
            <xs:element name="getFatherById" type="tns:getFatherById"/>
            <xs:complexType name="getFatherById">
                <xs:sequence>
                    <xs:element name="id" type="xs:int"/>
                </xs:sequence>
            </xs:complexType>

            <!-- Описывается тип данных getFatherById, который содержит в себе объект типа people -->
            <xs:element name="getFatherByIdResponse" type="tns:getFatherByIdResponse"/>
            <xs:complexType name="getFatherByIdResponse">
                <xs:sequence>
                    <xs:element minOccurs="0" name="return" type="tns:people"/>
                </xs:sequence>
            </xs:complexType>

            <!-- Описывается тип данных people, который возвращается методом getFatherById -->
            <xs:complexType name="people">
                <xs:sequence>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="children" nillable="true" type="tns:people"/>
                    <xs:element name="countOfCars" type="xs:int"/>
                    <xs:element minOccurs="0" name="dateOfBirth" type="xs:dateTime"/>
                    <xs:element minOccurs="0" name="gender" type="tns:gender"/>
                    <xs:element name="hasWork" type="xs:boolean"/>
                    <xs:element name="height" type="xs:double"/>
                    <xs:element minOccurs="0" name="name" type="xs:string"/>
                    <xs:element minOccurs="0" name="surname" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>

            <!-- Описывается enum Gender, который используется в объекте people -->
            <xs:simpleType name="gender">
                <xs:restriction base="xs:string">
                    <xs:enumeration value="MAN"/>
                    <xs:enumeration value="WOMAN"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:schema>
    </wsdl:types>

    <!-- (5) Описать входящие и исходящие сообщения.
    Добавляем элементы «message» с именами «getFatherById» и «getFatherByIdResponse» соответственно.
    В них мы указываем, что на вход должен прийти конверт, структура которого соответствует типу данных «getFatherById».
    После чего с сервера возвращается конверт содержащий тип данных – «getFatherByIdResponse». -->
    <wsdl:message name="getFatherById">
        <wsdl:part element="tns:getFatherById" name="parameters"> </wsdl:part>
    </wsdl:message>
    <wsdl:message name="getFatherByIdResponse">
        <wsdl:part element="tns:getFatherByIdResponse" name="parameters"> </wsdl:part>
    </wsdl:message>

    <!-- (4) Привязываем процедуру к сообщениям.
    Для этого мы указываем, что наша привязка («binding») имеет тип «PeopleService».
    И так, входящее сообщение (от клиента к серверу) будет называться «getFatherById»,
    а исходящее (от сервера к клиенту) «getFatherByIdResponse». -->
    <wsdl:portType name="PeopleService">
        <wsdl:operation name="getFatherById">
            <wsdl:input message="tns:getFatherById" name="getFatherById"> </wsdl:input>
            <wsdl:output message="tns:getFatherByIdResponse" name="getFatherByIdResponse"> </wsdl:output>
        </wsdl:operation>
    </wsdl:portType>

    <!-- (3) Для порта «PeoplePort» определена привязка под именем «PeopleServiceSoapBinding»,
    которая имеет тип вызова «document» и в качестве протокола передачи (транспорта) используется HTTP.
    После этого мы описываем какие процедуры (operation) поддерживаются в веб-сервисе.
    Мы будем поддерживать всего одну процедуру – «getFatherById».
    После того, как была объявлена процедура, необходимо указать в каком виде будут передаваться данные.
    В данном случае указано, что будут использоваться стандартные SOAP-конверты. -->
    <wsdl:binding name="PeopleServiceSoapBinding" type="tns:PeopleService">
        <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
        <wsdl:operation name="getFatherById">
            <soap:operation soapAction="" style="document"/>
            <wsdl:input name="getFatherById">
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:output name="getFatherByIdResponse">
                <soap:body use="literal"/>
            </wsdl:output>
        </wsdl:operation>
    </wsdl:binding>

    <!-- (2) Описываем, что в нашем веб-сервисе «PeopleService» есть точка входа («port»), которая называется «PeoplePort».
    Именно в эту точку входа и будут отправляться все запросы от клиентов к серверу (в том числе, и от нашего клиента).
    В элементе «address» указываем ссылку на endpoint, который будет принимать запросы. -->
    <wsdl:service name="PeopleService">
        <wsdl:port binding="tns:PeopleServiceSoapBinding" name="PeoplePort">
            <soap:address location="http://localhost:8083/endpoints/people"/>
        </wsdl:port>
    </wsdl:service>
</wsdl:definitions>